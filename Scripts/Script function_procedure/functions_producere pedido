//Registrar pedidos

CREATE OR REPLACE FUNCTION criar_pedido(
    p_dt_pedido TIMESTAMP,
    p_ds_status VARCHAR,
    p_ds_desconto_aplicado NUMERIC,
    p_ds_valor_total numeric,
    p_fk_nr_id_pessoa INT
)
RETURNS INT AS $$
DECLARE
    v_nr_id_pedido INT;
BEGIN
    INSERT INTO pedidos (
        dt_pedido,
        ds_status,
        ds_desconto_aplicado,
		ds_valor_total,
        fk_nr_id_pessoa
    )
    VALUES (
        p_dt_pedido,
    	p_ds_status,
    	p_ds_desconto_aplicado,
		p_ds_valor_total,
        p_fk_nr_id_pessoa
    )
    RETURNING nr_id_pedido INTO v_nr_id_pedido;

    RETURN v_nr_id_pedido;
END;
$$ LANGUAGE plpgsql;

//Localizar todos os pedidos

CREATE OR REPLACE FUNCTION obter_todos_pedidos_completo()
RETURNS TABLE (

    nr_id_pessoa INT,
    nm_roles VARCHAR,
    nm_nome_razaosocial VARCHAR,
    ds_email VARCHAR,
    ds_senha VARCHAR,
    ds_telefone VARCHAR,

    nr_id_produto INT,
    nm_nome VARCHAR,
    ds_preco DOUBLE PRECISION,
    ds_descricao TEXT,
    ds_imagem_produto VARCHAR,
    categoria_nome VARCHAR,

    nr_id_pedido INT,
    dt_pedido TIMESTAMP,
    ds_status VARCHAR,
    ds_desconto_aplicado NUMERIC,

    id_itens_pedido INT,
    item_pedido INT,
    item_produto INT,
    item_quantidade INT,
    item_preco_unitario DOUBLE PRECISION

)
AS $$
BEGIN
    RETURN QUERY
    SELECT

        ps.nr_id_pessoa,
        ps.nm_roles,
        ps.nm_nome_razaosocial,
        ps.ds_email,
        ps.ds_senha,
        ps.ds_telefone,

        pr.nr_id_produto,
        pr.nm_nome,
        pr.ds_preco,
        pr.ds_descricao,
        pr.ds_imagem_produto,
        c.nm_categoria AS categoria_nome,

        p.nr_id_pedido,
        p.dt_pedido,
        p.ds_status,
        p.ds_desconto_aplicado,

		ip.nr_id_itens_pedido AS id_itens_pedido,
		ip.fk_nr_id_pedido AS item_pedido,
		ip.fk_nr_id_produto AS item_produto,
        ip.ds_quantidade AS item_quantidade,
        ip.ds_preco_unitario AS item_preco_unitario

    FROM pedidos p
    JOIN produtos pr ON pr.nr_id_produto = p.fk_nr_id_produto
    JOIN categorias c ON c.nr_id_categoria = pr.fk_nr_id_categoria
    JOIN pessoas ps ON ps.nr_id_pessoa = p.fk_nr_id_pessoa
    JOIN itens_pedido ip ON ip.fk_nr_id_pedido = p.nr_id_pedido;
END;
$$ LANGUAGE plpgsql;

//Criar CUPOM de desconto para os pedidos

CREATE OR REPLACE FUNCTION inserir_cupom(
    p_nm_nome_cupom VARCHAR,
    p_valor_desconto NUMERIC,
    p_data_validade TIMESTAMP
)
RETURNS TABLE (
    nr_id_cupom INT,
    nm_nome_cupom VARCHAR,
    ds_valor_desconto NUMERIC,
    ds_data_validade TIMESTAMP,
    ds_usado BOOLEAN
)
AS $$
BEGIN

   IF EXISTS (SELECT 1 FROM cupons WHERE nm_nome_cupom = p_nm_nome_cupom) THEN
        RAISE EXCEPTION 'Já existe um cupom com esse código.';
    END IF;

    INSERT INTO cupons (nm_nome_cupom, ds_valor_desconto, ds_data_validade)
    VALUES (p_nm_nome_cupom, p_valor_desconto, p_data_validade)
    RETURNING
        cupons.nr_id_cupom,
        cupons.nm_nome_cupom,
        cupons.ds_valor_desconto,
        cupons.ds_data_validade,
        cupons.ds_usado
    INTO
        nr_id_cupom,
        nm_nome_cupom,
        ds_valor_desconto,
        ds_data_validade,
        ds_usado;

    RETURN NEXT;
END;
$$ LANGUAGE plpgsql;

//Buscar cupom gerado


CREATE OR REPLACE FUNCTION buscar_cupom_por_nome(
    p_nome_cupom VARCHAR
)
RETURNS TABLE (
    nr_id_cupom INT,
    nm_nome_cupom VARCHAR,
    ds_valor_desconto NUMERIC,
    ds_data_validade TIMESTAMP,
    ds_usado BOOLEAN
)
AS $$
BEGIN
    RETURN QUERY
    SELECT
        c.nr_id_cupom,
        c.nm_nome_cupom,
        c.ds_valor_desconto,
        c.ds_data_validade,
        c.ds_usado
    FROM cupons c
    WHERE TRIM(LOWER(c.nm_nome_cupom)) = TRIM(LOWER(p_nome_cupom));
END;
$$ LANGUAGE plpgsql;

